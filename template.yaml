AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Project:
    Type: String
    Default: "salyr"
  Enviroment:
    Type: String
    Default: "dev"
    AllowedValues:
      - dev
      - test
      - prod
  AmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: "The ID of the AMI."
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  DBInstanceClass:
    Type: String
    Default: db.t2.micro
  DBUserName:
    Type: String
    Default: quandd

Resources:
  InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Fn::ImportValue:
           !Sub "${Project}-web-server-role"

  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiID
      InstanceType: t2.micro
      KeyName: !Sub ${Project}-web-server-${Enviroment}-key
      SubnetId: 
        Fn::ImportValue: !Sub "${Project}-${Enviroment}-PublicSubnet"
      IamInstanceProfile: !Ref InstanceProfile
      SecurityGroupIds:
        - !GetAtt WebAppSecurityGroup.GroupId

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Project , sg, !Ref Enviroment]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId: 
        Fn::ImportValue: !Sub "${Project}-${Enviroment}-Vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebAppEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref WebAppInstance
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref Project , eip, !Ref Enviroment]]

  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Project}-db-secrets
      GenerateSecretString:
        SecretStringTemplate: !Sub
        - '{"username": "${username}"}'
        - { username: !Ref DBUserName }
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref RDSInstance
      TargetType: AWS::RDS::DBInstance

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "subnet group for rds"
      SubnetIds:
        - Fn::ImportValue: !Sub "${Project}-${Enviroment}-PrivateSubnet1"
        - Fn::ImportValue: !Sub "${Project}-${Enviroment}-PrivateSubnet2"

  SecurityGroupDB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DB instance
      VpcId: 
        Fn::ImportValue: !Sub "${Project}-${Enviroment}-Vpc"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref WebAppSecurityGroup

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub ${Project}-dev
      DBName: !Sub ${Project}_dev
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: "20"
      Engine: MySQL
      EngineVersion: "8.0.33"
      MultiAZ: False
      PubliclyAccessible: true
      StorageType: gp2
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref SecurityGroupDB
      MasterUsername: !Join
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref RDSSecret
          - ':SecretString:username}}'

      MasterUserPassword: !Join
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref RDSSecret
          - ':SecretString:password}}'
  


